-- Company	: RIT
-- Author	: Eliot Nagy
-- Created	: 4/11/22
--
-- Project Name	: ex12
-- File		: SerialAdderTB.vhd
--
-- Entity	: SerialAdderTB
-- Architecture	: tb
--
-- Description	: Creates a test bench to test the serial adder without control
--
-- Notes	: None

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;

entity SerialAdderTB is
end entity SerialAdderTB;

architecture tb of SerialAdderTB is

	-- A function to print out the 4-bit vectors nicely
	function vectorToString(vec: std_logic_vector) return string is
		variable stmp : string(vec'left+1 downto 1);
	begin
		for i in vec'reverse_range loop
			if vec(i) = '1' then
				stmp(i+1) := '1';
			else
				stmp(i+1) := '0';
			end if;
		end loop;
		return stmp;
	end vectorToString;

	-- Creates a test record
	type testRecord is record
		inA, inB : std_logic_vector(3 downto 0);
		outSum : std_logic_vector(3 downto 0);
		outCarry : std_logic;
	end record;

	type testRecordArray is array (natural range <>) of testRecord;

	-- Used to check the outputs based on the inputs
	constant tests : testRecordArray := (
		(X"0", X"4", X"4", '0'), 
		(X"C", X"E", X"A", '1'), 
		(X"8", X"A", X"2", '1'),
		(X"F", X"F", X"E", '1'), 
		(X"F", X"1", X"0", '1'), 
		(X"A", X"5", X"2", '0'), 
		(X"8", X"7", X"F", '0')); 

	-- Creates the internal variables that will be used to assign values to the serial adder
	signal in_a, in_b : std_logic_vector(3 downto 0):= "0000";
	signal control : std_logic_vector(1 downto 0):= "00";
	signal clk, clear_dp : std_logic:= '0';
	signal sum : std_logic_vector(3 downto 0);
	signal carry : std_logic;
	constant clk_period : time := 50 ns;

	begin

	-- Maps the test bench to the serial adder
	uut: entity work.SerialAdder port map(in_a => in_a, in_b => in_b, control => control, clear_dp => clear_dp, 
					      clk => clk, sum => sum, carry => carry);
	
	-- A process that controls the clock
	process begin
		clk <= '0';
		wait for clk_period/2;
		clk <= '1';
		wait for clk_period/2;
	end process;

	-- Runs the test bench
	process begin
		for i in tests'range loop
			in_a <= tests(i).inA;
			in_b <= tests(i).inB;

			-- Resets the values in the shift registers
			clear_dp <= '0';
			wait for clk_period;

			-- Stops shift register from reseting
			clear_dp <= '1';
			wait for clk_period;

			-- Loads the values into the shift register
			control <= "11";
			wait for clk_period;
			
			-- Starts shifting the shift registers to the bits are added
			control <= "01";
			wait for 4*clk_period;

			-- Checks the outputs
			assert(sum = tests(i).outSum and carry = tests(i).outCarry)
			report "Wrong Sum or Carry out for inputs A = " & vectorToString(tests(i).inA) & ", B = " & 
				vectorToString(tests(i).inB) & ". Got Sum = " & vectorToString(sum) & ", Carry = " & std_logic'image(carry);
		end loop;
		assert false report "The best bench passed" severity failure;
	end process;
end architecture tb;